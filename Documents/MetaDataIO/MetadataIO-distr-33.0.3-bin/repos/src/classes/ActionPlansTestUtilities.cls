/**
* Generate the enviroment for the Unit Tests
* @author Matias Menafra
* @createddate 05/14/2010
*/
public with sharing class ActionPlansTestUtilities{
	
	/**
	* Attributes 
	*/ 
 	public ActionPlan__c 		 tAP		{ get; set; }
 	public APTaskTemplate__c	 tAPTask	{ get; set; }
 	public ActionPlanTemplate__c tAPT		{ get; set; }
 	public APTTaskTemplate__c	 tAPTTask	{ get; set; }
 	
 	//Lists
 	public List<APTaskTemplate__c>	tAPTList	{ get; set; }
 	public List<APTTaskTemplate__c>	tAPTTList	{ get; set; }
 	public List<Task>				tTaskList	{ get; set; }
 	
 	public User			tUser { get; set; }
 	public Account		tAcc  { get; set; }
 	public Lead			tLead { get; set; }
 	public Opportunity	tOpp  { get; set; }
 	public Contact		tCon  { get; set; }
 	public Task			tTask { get; set; }
 	
 	
 	
 	public ActionPlansTestUtilities(){
 		
 	}
 	
 	/**
    * Random words are required for testing 
    * as you will likely run into any word I can insert
    * during a test class and produce false test results.
    */
    public String createRandomWord() {
      
      String ret = 'word' + math.rint(math.random() * 100000);
      
      return ret;
    }
 
 	
 	/*
    * A random user is useful for testing in order to be 
    * sure that you are able to see data across posts regardless
    * of follow status.
  	*/
  	public User createTestUser() {
  		Profile profile = [Select Id, Name from Profile where Name = 'System Administrator'];
    	return this.createTestUser( profile );
  	}
  
  	/**
 	* Creates a new User
 	* @return testUser
 	*/
  	public User createTestUser( Profile p ) {
    
    	String namePrefix = this.createRandomWord();
    
    	//AggregateResult[] userCount = [ Select count( id ) userCount From User where username like : namePrefix ];
    	//Object users = userCount[0].get('userCount');
    
    	User testUser = new User();
    	testUser.Email 				= 'test@test.com';
    	//testUser.Username 		= namePrefix + users + '@testuser.com';
    	testUser.Username 			= namePrefix + '@testuser.com';
    	testUser.LastName 			= 'test';
    	testUser.Alias 				= 'test';
    	testUser.ProfileId 			= p.Id;
    	testUser.LanguageLocaleKey 	= 'en_US';
    	testUser.LocaleSidKey 		= 'en_US';
    	testUser.TimeZoneSidKey 	= 'America/Chicago';
    	testUser.EmailEncodingKey 	= 'UTF-8';
    	
    	insert testUser;
    	
    	return testUser;
  	}
 	
 	/**
 	* Creates a new Account Object 
 	* @return newAccount
 	*/
 	public Account createNewAccount(){
 		
 		Account newAccount 	= new Account();
 		newAccount.Name 	= this.createRandomWord();
 		
 		try{
 			insert newAccount;
 		}
 		catch( Exception ex ){
 			System.assert( false ,'Pre deploy test failed, This may be because of custom validation rules in your Org. You '
 				+ 'can check ignore apex errors or temporarily deactivate your validation rules for Accounts and try again.');
 		}
 		
 		return newAccount;
 	}
 	
 	/**
 	* Creates a new Contact Object
 	* @return newContact
 	*/
 	public Contact createNewContact(){
 		
 		Contact newContact 		= new Contact();
 		newContact.LastName 	= this.createRandomWord();
 		
 		try{
 			insert newContact;
 		}
 		catch( Exception ex ){
 			System.assert( false ,'Pre deploy test failed, This may be because of custom validation rules in your Org. You '
 				+ 'can check ignore apex errors or temporarily deactivate your validation rules for Contacts and try again.');
 		}
 		
 		return newContact;
 	}
 	
 	/**
 	* Creates a new Lead Object 
 	* @return newLead
 	*/
 	public Lead createNewLead(){
 		
 		Lead newLead 		= new Lead();
 		newLead.LastName	= this.createRandomWord();
 		newLead.Company		= this.createRandomWord();
 		newLead.Status		= 'Open - Not Contacted';
 		
 		try{
 			insert newLead;
 		}
 		catch( Exception ex ){
 			System.assert( false ,'Pre deploy test failed, This may be because of custom validation rules in your Org. You '
 				+ 'can check ignore apex errors or temporarily deactivate your validation rules for Leads and try again.');
 		}
 		
 		return newLead;
 	}
 	
 	/**
 	* Creates a new Opportunity Object 
 	* @return newOpportunity
 	*/
 	public Opportunity createNewOpportunity(){
 		
 		Opportunity newOpportunity 	= new Opportunity();
 		newOpportunity.Name			= this.createRandomWord();
 		newOpportunity.CloseDate	= Date.today();
 		newOpportunity.StageName	= 'Prospecting';
 		
 		try{
 			insert newOpportunity;
 		}
 		catch( Exception ex ){
 			System.assert( false ,'Pre deploy test failed, This may be because of custom validation rules in your Org. You '
 				+ 'can check ignore apex errors or temporarily deactivate your validation rules for Opportunitys and try again.');
 		}
 		
 		return newOpportunity;
 	}
 	
 	/**
 	* Create Action Plan 
 	* @param relatedObject
 	* @return newActionPlan
 	*/
 	public ActionPlan__c createNewActionPlan( String relatedObject, Integer numTasks ){
 		
 		ActionPlan__c newActionPlan = new ActionPlan__c();
 		newActionPlan.Name			= this.createRandomWord();
 		newActionPlan.StartDate__c 	= Date.today();
 		
 		if( 'accounts'.equalsIgnoreCase( relatedObject ) ){
 			newActionPlan.Account__c = this.createNewAccount().Id;
 		}
 		if( 'contacts'.equalsIgnoreCase( relatedObject ) ){
 			newActionPlan.Contact__c = this.createNewContact().Id;
 		}
 		if( 'leads'.equalsIgnoreCase( relatedObject ) ){
 			newActionPlan.Lead__c = this.createNewLead().Id;
 		}
 		if( 'opportunitys'.equalsIgnoreCase( relatedObject ) ){
 			newActionPlan.Opportunity__c = this.createNewOpportunity().Id;
 		}
 		
 		try{
 			insert newActionPlan;
 		}
 		catch( Exception ex ){
 			System.assert( false ,' Inserting Action Plan failed,' + ex );
 		}
 		
 		APTaskTemplate__c auxTask = new APTaskTemplate__c();
 		User user = this.createTestUser();

 		//Creates default tasks for Action Plan
 		for( Integer i = 0; i < numTasks; i++ ){
 			auxTask = this.createNewActionPlanTask( newActionPlan, 1, user, 'Email', 'High' );
 		}
 		
 		return newActionPlan;
 	}
 	
 	/**
 	* Create Action Plan task Object
 	* @return newAPTask
 	*/
 	public APTaskTemplate__c createNewActionPlanTask( ActionPlan__c actionPlan , Integer days, User user, String category, String priority ){
 		
 		APTaskTemplate__c newAPTask = new APTaskTemplate__c();
 		newAPTask.Subject__c 		= this.createRandomWord();
 		newAPTask.DaysFromStart__c 	= days;
 		newAPTask.Action_Plan__c 	= actionPlan.Id;
 		newAPTask.User__c 			= user.Id;
 		newAPTask.Type__c 			= category;
 		newAPTask.Priority__c 		= priority;
 		
 		try{
 			insert newAPTask;
 		}
 		catch( Exception ex ){
 			System.assert( false ,' Inserting Action Plan task failed,' + ex );
 		}
 				
 		return newAPTask;
 	}
 	
 	/**
 	* Create Action Plan 
 	* @return apTemplate
 	*/
 	public ActionPlanTemplate__c createNewActionPlanTemplate( Integer numTasks ){
 		
 		ActionPlanTemplate__c apTemplate = new ActionPlanTemplate__c();
 		apTemplate.Name = this.createRandomWord();
 		
 		try{
 			insert apTemplate;
 		}
 		catch( Exception ex ){
 			System.assert( false ,' Inserting Action Plan Template failed,' + ex );
 		}
 		
 		APTTaskTemplate__c auxTask = new APTTaskTemplate__c();
 		//Creates default tasks for Action Plan
 		for( Integer i = 0; i < numTasks; i++ ){
 			auxTask = this.createNewActionPlanTemplateTask( apTemplate, 1, null, 'Email', 'High' );
 		}
 		
 		return apTemplate;
 	}
    
    /**
 	* Create Action Plan Template Task
 	* @return newAPTTask
 	*/
    public APTTaskTemplate__c createNewActionPlanTemplateTask( ActionPlanTemplate__c apTemplate, Integer days, User user, String category, String priority ){
 		
 		APTTaskTemplate__c newAPTTask = new APTTaskTemplate__c();
 		
 		newAPTTask.Action_Plan_Template__c 	= apTemplate.Id;
 		newAPTTask.Subject__c 				= this.createRandomWord();
 		newAPTTask.DaysFromStart__c 		= days;
 		newAPTTask.Dependent__c				= 'None';
 		if( user != null ){
 			newAPTTask.User__c = user.Id;
 		}
 		newAPTTask.Type__c 		= category;
 		newAPTTask.Priority__c 	= priority;
 		
 		try{
 			insert newAPTTask;
 		}
 		catch( Exception ex ){
 			System.assert( false ,' Inserting Action Plan Template task failed,' + ex );
 		}
 				
 		return newAPTTask;
 	}
 	
 	/**
 	* Create Enviroment for BatchProcess
 	* return apTasksIds
 	*/
 	public List<String> batchIds( String ref ){
 		
	 		ActionPlan__c ap = this.createNewActionPlan( ref ,0);
			List<String> apTasksIds = new List<String>();
		
			APTaskTemplate__c at = new APTaskTemplate__c();
	   		at.Action_Plan__c 	 = ap.Id;
	   		at.Dependent__c		 = 'None';
	   		at.DaysFromStart__c  = 2.0;
	   		at.User__c			 = this.createTestUser().Id;
	   		at.SendEmail__c		 = false;
	   		at.Subject__c		 = 'Test ';
	   		at.Type__c			 = 'Email';
	   		at.Priority__c		 = 'Low';
	   		at.Comments__c		 = 'Test';
	   		at.Reminder__c		 = true;
	   		insert at;
	   		apTasksIds.add(at.Id);
	   		
	   		at = new APTaskTemplate__c();
	   		at.Action_Plan__c 	 = ap.Id;
	   		at.Dependent__c		 = 'None';
	   		at.DaysFromStart__c  = 2.0;
	   		at.User__c			 = this.createTestUser().Id;
	   		at.SendEmail__c		 = true;
	   		at.Subject__c		 = 'Test ';
	   		at.Type__c			 = 'Email';
	   		at.Priority__c		 = 'Low';
	   		at.Comments__c		 = 'Test';
	   		at.Reminder__c		 = true;
	   		insert at;
	   		apTasksIds.add(at.Id);
	   		
	   		return apTasksIds;
 	}
 	
    
    static TestMethod void testRandomWord(){
      
      ActionPlansTestUtilities apTestUtil = new ActionPlansTestUtilities();
      
      System.assert( apTestUtil.createRandomWord() != apTestUtil.createRandomWord() );
    }
}