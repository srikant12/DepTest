<?xml version="1.0" encoding="UTF-8"?>
<Scontrol xmlns="http://soap.sforce.com/2006/04/metadata">
    <contentSource>HTML</contentSource>
    <description>A process to reject a fund request, which was either submitted or previously approved. The process changes the status to “Rejected” and updates the channel budget for previously approved requests.</description>
    <encodingKey>UTF-8</encodingKey>
    <fileContent></fileContent>
    <fileName>C:\Documents and Settings\aodriscoll\Desktop\helperFunction.js</fileName>
    <name>Reject Fund Request</name>
    <supportsCaching>true</supportsCaching>
</Scontrol>
