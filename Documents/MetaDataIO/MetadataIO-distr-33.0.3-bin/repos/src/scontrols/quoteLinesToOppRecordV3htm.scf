<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html> <head> 
<title></title> 
<script src="http://www.salesforce.com/services/lib/ajax/beta3.3/sforceclient.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript"> 
<!--- 
/* v2.21.06 multicurrency support
 * v2.28 - ensure that the unit price will not be null
 * 3.3 carry Description__c into the product line description
 * 3.30 fetch all needed pricebook entries from pricebook query to fix bug reported by customer (88924)
 */
Sforce.DescribeSObjectResult.prototype.getCloneFields = function() {
	var out = new Array();
	for (key in this.fieldMap.getKeys()) {
		if (this.fieldMap.getItem(key).updateable  == true ||
			this.fieldMap.getItem(key).createable   == true )  {	
			out.push( this.fieldMap.getItem(key).name );
		}
	}
	return out.join(",");
}
//var retUrl = "/{!SFDC_520_Quote__c.Id}";
var opid = "{!SFDC_520_Quote__c.OpportunityId__c}";
var isPrimary = "{!SFDC_520_Quote__c.Primary__c}";
var has_multicurrency = true;
var opp_currency = "";
function jumpbackQuote() { jumpback("/{!SFDC_520_Quote__c.Id}") }
function jumpbackOpp() { jumpback("/{!SFDC_520_Quote__c.OpportunityId__c}"); }
function jumpback(retUrl) { 
	
	if (typeof(window.opener) == "object")  { 
		window.opener.location.href = retUrl;
		window.close();
	} 
	window.parent.parent.location.href = retUrl; 
	window.close();
} 

function listlines(quoteid,flds) { 
	var soql = "select " + flds +" from SFDC_520_QuoteLine__c where Quote__c = '"+quoteid+"'";
	// alert(soql);
	var qlines = sforceClient.Query( soql);
	// alert(qlines.toString()); 
	if (qlines.className != "QueryResult") { 
		alert("query record id failed : " + qlines.toString()) ; 
		return null; 
	}
	if ( qlines.records.length < 0) { 
		alert("no detail lines " + qlines.toString() + soql); 
		return null;
		}
	return qlines.records;
}

function initPage() {
	sforceClient.useCookies = true;
	sforceClient.registerInitCallback(setup);
	sforceClient.init("{!API.Session_ID}", "{!API.Partner_Server_URL_70}", true); 
}

// the following is broken up to allow the page to show waiting dots...
var theopp; 
function setup_multicurrency() { // see if we have > 1 currency
	var qr = sforceClient.Query("select id, ConversionRate,IsActive,IsCorporate,IsoCode from CurrencyType where IsCorporate = true ") ; 
	if (qr.className == 'Fault') { 
		if (/INVALID_TYPE/.test(qr.faultcode) ) { return false; }
	}
	return true;
}
function setup() { 
	if ("{!SFDC_520_Quote__c.Primary__c}" == "0") { 
		alert("Error: Only a Primary quote may be converted to Opportunity Line Items\n"+
		"please use only the Primary quote for this process");
		jumpbackQuote(); 
		return;
	}
	has_multicurrency = setup_multicurrency();
/*	may need this later
	var qbean = new Sforce.Dynabean("SFDC_520_Quote__c");
	var qfields = qbean.definition.getCloneFields(); // list the editable fields , skip the read only
	var soql = "select Id," + qfields + " from Quote__c where id = '{!SFDC_520_Quote__c.Id}'";
//	alert('soql: '+soql)
	
	var queryResult = sforceClient.Query(soql); 
	if ( queryResult.size < 1 || queryResult.className != 'QueryResult') { 
		alert ( 'no quote found?') ;jumpbackQuote(); return;
	}
	thequote = queryResult.records[0];
*/
	progress("load opportunity details")
	// pull some info from the opportunity
	if ( has_multicurrency) { fields = "id,Pricebook2Id,name,CurrencyIsoCode ";} 
	else {  fields = "id,Pricebook2Id,name  "; } 
	var oppRes = sforceClient.Query("select " + fields + " from opportunity where id = '"+opid + "'");
	if ( oppRes.size < 1 || oppRes.className != 'QueryResult') { 
		alert ( 'no opportunity found?' + oppRes.toString() ) ;
		jumpbackQuote(); 
		return;
	}
	
	theopp = oppRes.records[0];
	if (has_multicurrency) opp_currency = theopp.get("CurrencyIsoCode");
	//alert("opportunity is " + theopp.toString());
	setTimeout("setup2();",50);
}
var pb2id; var qlines;
function setup2() { 
	// the opp must have a price book assigned, get them to pick or use the "active one"
	pb2id = theopp.get("Pricebook2Id") ;
	if ( ! pb2id ) { 
		alert("please select a price book for this opportunity"); 
		jumpback ("/oppitm/choosepricebook.jsp?sUrl=%2F{!SFDC_520_Quote__c.Id}"+
			"&retURL=%2F{!SFDC_520_Quote__c.Id}&id="+opid );
		return; // they will have to select a price book and hit this link again
	} 
	
	// get a list of related detail items 

	var qlbean = new Sforce.Dynabean("SFDC_520_QuoteLine__c");
	var qlfields = qlbean.definition.getCloneFields(); // list the editable fields , skip the read only
	
	qlines = listlines( "{!SFDC_520_Quote__c.Id}", qlfields + ",Ext_Net_Price__c,Unit_Net_Price__c");
	// really should be ok if there are no related records...
	/*
	 * if (!qlines || !qlines[0] ) {	alert("quote has no related records");} 
	 */
	progress("found "+qlines.length+ " quote line items");
	setTimeout("setup3();",50);
}
function setup3() { 
	// check for missing prices, currency matching
	var missing_qty = 0; var currency_mis = 0;
	for (var key in qlines) {	var q = qlines[key];
		
		if ( ! q.get("Unit_Price__c") ) { 
			q.set("Unit_Price__c","0.00");
		}
		if ( ! q.get("Unit_Net_Price__c") ) { 
			q.set("Unit_Net_Price__c","0.00");
		} 
		if ( ! q.get("Qty_Ordered__c") ) { missing_qty++;} 
		if (has_multicurrency) { 
			if ( q.get("CurrencyIsoCode") != opp_currency) currency_mis++ 
		}
	}
	if ( missing_qty > 0 ) { 
		alert("The Quote Detail lines contain one or more records with \n"+
			"missing information: Qty, please correct");
		jumpbackQuote(); 
		return;
	}
	if ( currency_mis > 0 ) { 
		alert("Error: One or more Quote Detail lines contain an invalid Currency\n"+
			"Please correct all lines to match the Opportunity\nCurrency -> " + opp_currency);
		jumpbackQuote(); 
		return;
	}	
	progress("load pricebook entries")
	setTimeout("setup4();",50);
}
var OLI = new Array(); 
function grep (func, thisary)  { // works if func is a function returning true
	var ret = []; 
	for(var x=0;x<thisary.length;x++)  {
		if( func(thisary[x]) ) { ret.push(thisary[x]); }
	}
	return ret.length>0?ret:null;
}
var PB = []; 
function setup4() { 
	PB = getPriceBookEntries(pb2id, qlines);
	progress("build new opportunity line items")
	setTimeout("setup44();",50);
}
function setup44() { 
	/* opp line item on an opp, is related to a price book entry
	 * which is related to the product
	 * we have the product , and a unit price approved , so 
	 * create a PBE foreach QuoteLine item
	 * then create a OLI on the Opp for each PBE
	 * be carefull to match the currency in the event that this product 
	 * appears more than once in the pricebook ( as it may)
	 */
	for (key in qlines) {
		var q = qlines[key];
		// find this product, in the oppo price book, with the correct 
		// currency if we are in a multi-currency org
		var p2 = q.get("Product2__c")
		var pbe = grep( function(p) { return (p.get("Product2Id") == p2) } , PB);
		if (!pbe)  { 
			alert("could not locate price book entry :"+p2+" in price book for this opportunity"); 
			jumpbackQuote(); 
		}
		if ( pbe.length > 1) { 
			//alert("found multiple matching product in pricebook "+ pb2id +"\n"+pbe.toString());
			if (has_multicurrency) {  // pull one that matches the opp currency 
			 pbe = grep( function(p) { return (p.get("CurrencyIsoCode") == opp_currency)} , pbe);
			}
		}
		if ( !pbe || pbe.length < 1 ) { 
			alert(" product misssing from price book for this opportunity, please add"); 
			jumpbackQuote(); 
		}
		
		var tpbe = pbe[0];
		var p = new Sforce.Dynabean("OpportunityLineItem");
		p.set("OpportunityId",opid);
		p.set("Quantity",q.get("Qty_Ordered__c") );
	//	p.set("TotalPrice",q.get("Ext_Net_Price__c")); // this gets set by qty * unit price
		p.set("PriceBookEntryId",tpbe.get("Id") ); // this is the only thing we use from PB
		var unp = q.get("Unit_Net_Price__c"); 
		if (unp == 0) { unp = "0.00"} // ensure that the unit price will not be null
		p.set("UnitPrice", unp );
		p.set("Description",q.get("Description__c"));
		p.set("ServiceDate",q.get("ServiceDate__c"));
		if ( has_multicurrency) { p.set("CurrencyIsoCode",opp_currency); }
		
		OLI.push(p);
	}
	
	progress("list old opportunity line items")
	setTimeout("setup5();",50);
}
function setup5() { 
	// clear out any existing product line items

	sforceClient.Query("select id from OpportunityLineItem where OpportunityId = '"+ opid + "'", 
		setup6);
}
function setup6( dd ) {	
	if ( dd.className == 'QueryResult' && dd.records.length > 0) { 
		var todel = []; 
		for (k in dd.records) { todel.push(dd.records[k].get("Id")); } 
		progress("remove old opportunity line items")
		if ( todel != null && todel.length > 0) { 
			var sr = sforceClient.Delete(todel, setup7); // this is slow..
		} 
	} else { setup7(); } 
}

function setup7() { 
	// finaly create new lines
	progress("create new lines")
	var ret = create_call(OLI);
	// jump to the updated quote record
	jumpback("/" + opid);
	return;
}
 
function getPriceBookEntries(pb2id, qlines) {
	/* need to fetch from  PricebookEntry Product2Id, matching the Product2__c in qlines
	 * so that later when we grep this list they are all there
	 * if any are missing, call that out now
	 */
	var prod2ids = [];	for (var i = 0; i<qlines.length; i++) {  
		prod2ids.push(qlines[i].get("Product2__c")); // this is the list we need to fetch
	}
	var fields = "Id,Product2Id "; 	
	if ( has_multicurrency) {  fields += ", CurrencyIsoCode "; }
	var ret = []; 
	while (prod2ids.length > 0) {
		// build a list of upto 25 product2ids in this form 
		// Product2Id = 'xx' or Product2Id = 'yyy' repeat...
		var p2orlist = ''; var mx=33;
		while (prod2ids.length > 0 && mx > 0) { 
			p2orlist += "Product2Id = '" + prod2ids.pop() + "'" ;
			mx--;
			if (prod2ids.length > 0 && mx > 0) p2orlist += " or ";
		} 
		// alert(p2orlist);
		var pb = sforceClient.Query( "select "+fields + 
			"from PricebookEntry where Pricebook2Id = '"+pb2id+
			"' and ( "+p2orlist+" ) ");
		if ( pb.className != 'QueryResult') { 
			alert ("could not query pricebook entry \n" + pb.toString()) ;jumpback();
		}
		ret = ret.concat(pb.records);
	} 
	
	return ret;
}

function create_call (ar) {
	var dst = sforceClient.Create(ar);
	if (dst.className != "SaveResults" || dst[0].id == null ) { 
		// list the errors
		var msg = '';
		for ( var i = 0; i < dst.length ; i++) {
			if (dst[i].id == null) { 
				msg += dst[i].errors[0].message ;msg += "\n"; 
			} 
		}
		alert("could not create record with data provided \n"+ msg );
		jumpbackQuote(); 
	}
	return dst; 
}

function progress(s) { document.getElementById('progress').innerHTML = s; } 
-->
</script> 
</head> 

<body onload="initPage()"> 
<center>
<p><SPAN STYLE=" font-size: 75%; font-family: 'Arial', 'Helvetica', sans-serif;"> 
Please wait, loading quote number: {!SFDC_520_Quote__c.Name} into Opportunity ...</span>
<br><br>
<img src="/img/waiting_dots.gif" alt="Please wait..." title="Please wait..." height="20" width="196">
<br>
<div id="progress" STYLE=" font-size: 75%; font-family: 'Arial', 'Helvetica', sans-serif;"></div>
</center>
</body> 
</html>