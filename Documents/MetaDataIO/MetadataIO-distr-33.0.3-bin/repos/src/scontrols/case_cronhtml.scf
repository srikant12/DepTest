<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
<!--  
 AJAX S-Control, Gather Case Comments, Case Hisotry, Activities, Attachment into one timeline  
 write them into a cronological list that the user can scroll thru
 
 v2.26.06 add theme2 css, fix to display in locale date format, add attachments, check for no API
 v2.27 add public private button, fix date formats to match case history, extend comment length to 255
 v2.28 add full comment button, add wait cursor, adjust some labels, format long comments
 v2.30 add wait message inside the table when performing long tasks, tweak labels
 v3.5 add subject, desc, status boxes, links to popup related objects, update status button
 v3.6 fix long lines which don't wrap properly, group ID's should not appear, just names
 3.17 fix status pulldown in IE, was not autosizing
 3.28 rewrite UI , remove status change feature
 4.25 improve msg when description changes or oldvalue and newvalue are null
 5.8.06 add CaseHistory_ispublic, default to false
 
<link  href="/dCSS/Theme1/default/common.css" type="text/css" rel="stylesheet" >
-->

<link  href="/dCSS/Theme2/default/common.css" type="text/css" rel="stylesheet" > 
<style>
.bPageTitle .ptBody .content {
    width: 90.0%;
    padding-bottom: 5px;
}
.usertimestamp td {
	background: #FFFFFF;
	border-top: 1px solid #E3DEB8;
	font-weight:bold;
	font-size: 91%;
}
body { margin-top: 10px; }

</style>
<script type="text/javascript" src="/js/functions.js"></script>
<script src="https://www.salesforce.com/services/lib/ajax/beta3.3/sforceclient.js" type="text/javascript"></script>

<script language="javascript">
<!--

var cid = "{!Case_ID}";
var dformat; // holds the format string that we think date should be shown with
var qr; 	// global query result
var table;  // the main list table
var sapp; 	// used to detect which browser
var hide_private = false; // starts false
var CaseHistory_ispublic = false; // configurable
var list ; 	// the main list to hold display data 
var hasVisInSS = false; 	// this task field may be off for many orgs, controls task visiblity in SSP
var fullcomment = false;  	// not implemented in this version
var newest_ontop = true;
var maxBrokenLine = 65; // v3.6
var nameHistoryField = "HistoryText__c" ; // the name of the field to write the history text into
var nameHistoryFieldName = "HistoryText"; // name without the suffix so that we can instruct user to add it
var maxSizeCommentOrActivity = 2048;

function jumpback() { 
	if ( typeof(window.opener) == 'object' ) { 
		setTimeout("window.close();",100); 
		window.opener.location.href = "/" + "{!Case_ID}";
	}
	else { window.parent.parent.location.href = "/" + "{!Case_ID}"; }
}

function initPage() {
	sforceClient.init("{!API_Session_ID}", "{!API_Partner_Server_URL_70}");
	var uInfo = sforceClient.GetUserInfo(); 
	if ( uInfo && uInfo.faultcode && uInfo.faultcode.indexOf("API_DISABLED_FOR_ORG")>0) {
		alert( uInfo.faultstring +
			"\nThis custom link utilizes the AppExchange API.\n" +
			"It appears that the Salesforce.com edition you are using does not have this feature enabled."
		);
		jumpback(); return; 
	}
	sapp = new Sforce.Application();
	dformat = Sforce.Util.ParseDateFormat("{!Today}",uInfo.userLocale);
	if (!dformat) { dformat = "M/d/y";}	//alert( "{!Today}" + " " + dformat );

	if ( ! fieldDefined("Case",nameHistoryField) ) { 
		genErr("Missing Field: for email history functionality you must add a Large Text field named "+
			nameHistoryFieldName + " to your case object"); 
	} else { clrErr(); } 
		
	// history of case
	table = makeTable(document.getElementById("main"));
	tr = createTag(table.tbody,'tr');
	createTag(tr,"td").innerHTML = "Generating timeline, please wait...";
	document.body.style.cursor = "wait"; // start waiting
	sforceClient.DescribeSObject("Task", pageSetup ); // need this to ensure fields are visible
}

function changeView (ele) { 	
	hide_private = (ele.value != 'all');
	drawList(table,list);
}

function drawList(table,list) {
	document.body.style.cursor = "wait"; // start waiting
	while (table.rows.length > 0) { // clear the table
		table.deleteRow(table.rows.length-1);  
	}
	var tr = createTag(table.tbody,'tr');
	createTag(tr,"td").innerHTML = "Generating timeline, please wait...";

	setTimeout('drawList_1()',30); // need to free up the browser to draw the message 
}

function drawList_1() { 
	list.sort(sortDate); // sort  by date
	while (table.rows.length > 0) { table.deleteRow(table.rows.length-1); }
	var tr = createTag(table.tbody,'tr',{'class':'headerRow'});// draw header
	createTag(tr,"th").innerHTML = 'Date/Time';
	createTag(tr,"th").innerHTML = 'Name'
	createTag(tr,"th", {'width':'5%'} ).innerHTML = 'Public'
	
	for (var i=0;i<list.length;i++) { rowprint(list[i]); }	// draw list 
	
	document.body.style.cursor="default"; // done waiting
}

function pageSetup(taskbean) {
	list = []; 
	// query as much info as we can about this case, report in a list ( scrolling...) 
	// put everything in an array of objects so we can sort them and output in a common form
	// see if this account exists
	
	try { // get hist changes	
		var qr = sforceClient.query( "Select Id, CreatedById, CreatedDate, Field, NewValue, OldValue From casehistory where caseid = '" + cid + "'" );
		qcallback(qr);
		//for(var k in qr.records) { alert(qr.records[k].toString()) ; }
		
		// get activities
		var fields = " Id,CreatedById, subject, WhoId, CreatedDate,Description ";
		if ( taskbean.fieldMap.containsItem('IsVisibleInSelfService') ) { 
			fields += ", IsVisibleInSelfService ";
			hasVisInSS = true;  
		}
		qr = sforceClient.query( "Select "+ fields + " From Task where WhatId = '" + cid + "'" );
		qcallback(qr);
		// get comments
		qr = sforceClient.query( "Select Id,  CreatedById, IsPublished, CommentBody, CreatedDate From CaseComment where ParentId = '" + cid + "'" );
		qcallback(qr);
		// get attachments
		qr = sforceClient.query("select id,	Name,CreatedDate, CreatedById from Attachment where ParentId = '" + cid + "'" );
		qcallback(qr);
	
		// and events
		qr = sforceClient.query("Select "+ fields + " From Event where WhatId = '" + cid + "'" );
		qcallback(qr);
		
		drawList(table,list);
		setTimeout("fillHistoryField(list);",1000); // allows a mail merge to send this history
	} catch (e) {
		var tr = createTag(table.tbody,'tr');
		createTag(tr,"td").innerHTML = "Exception: "+e;
	}
	return; 
}

/* these next two functions create a text version of the history in a large text field 
 * on the case record, handy if we want to mail a "public" summary of the case to the user.
 * we build a button in this control interface to run the email send, but it could also be a custom link on case
 */ 
var textField; var maxSizeTextField = 0;
function fillHistoryField( list) { 
	if ( ! fieldDefined("Case",nameHistoryField) ) return; // check for the history field, msg user?
	textField = '';
	maxSizeTextField = fieldSize("Case",nameHistoryField); // grab the size of the target field so we dont over write it..

	try { 
		for (var i=0;i<list.length;i++) { addHistFieldItem(list[i]); }	// build the new history text field
		var dacase = new Sforce.Dynabean("Case"); 	// create bean and fill it
		dacase.set("Id",cid); 
		dacase.set(nameHistoryField,textField); 
		var sr = dacase.save(); 					// write the bean to database
		if (sr.className == "SaveResult" && sr.success ) { // If the save went ok put up the send hist button
			drawEmailButton('emailbutton');
		} else { throw(sr.toString()); }
	} catch (e) { alert("error filling history field "+e); }
} 

/* desired format 
CASE HISTORY TIMELINE
1023145
___________________________________________________________________________
4/2/2006 5:55PM        Jane Supporto 
---------------------------------------------------------------------------
Comment:
"Your ticket has been closed. Thank you for contacting our service department. 
You can rate your experience here: http://www.salesforce.com "

___________________________________________________________________________
4/2/2006 5:09 PM       Jane Supporto 	 
---------------------------------------------------------------------------
Task:
Email: Your case 00001026 self-service password [ ref:00D363w9.50031bSIR:
Comment: 
Additional To: spavlova@uog.com
CC:
BCC: me@salesforce.com
Attachment:
Subject: Your case 00001026 self-service password [ ref:00D363w9.50031bS
Body:Your case # 00001026: test sub has been updated.
Please click on the link below to view this case on the self-service portal.
<insert the link to your self-service portal login page here>
saleforce.com Customer Support

___________________________________________________________________________
4/2/2006 4:17 PM        Joe User 
---------------------------------------------------------------------------
Comment:
"I'll be home after 5pm"

*/
function addHistFieldItem(so) { 		
	if (!ispublic(so)) return; // this field is always the public version of events

	var l_textField = "_______________________________________________________________\n" + 
	Sforce.Util.FormatDate(so.get('CreatedDate'), dformat + " HH:mm") + "        ";
	l_textField += fkname( so.get('CreatedById') ) + "\n" +
	"---------------------------------------------------------------\n";
	switch (so.name) { 
		case "CaseHistory":
			// special case, history contains a duplicate entry holding the id of a user or contact change
			// but we already get the strings , so skip this these.
			var ov = so.get('OldValue'); var nv = so.get('NewValue');
			if ( /005/.test(ov) || /005/.test(nv) ) return;
			if ( /003/.test(ov) || /003/.test(nv) ) return;		
			if ( /02i/.test(ov) || /02i/.test(nv) ) return;		
						
			var ff = so.get('Field');
			var what = ff.slice(0,1).toUpperCase()+ ff.substr(1); 
			switch (what) { 
			case 'Created': l_textField += "Case created"; 
				break;
			case 'Closed': l_textField += "Case Closed"; 
				break;
			case 'OwnerAssignment' : what = 'Owner Assignment';
			default:
				if (ov && nv) { 
					l_textField += what + " changed from " + ov + " to " + nv;
				} else if (nv) { 
					l_textField += what + " changed to " + nv; 
				} else { 
					l_textField += what + " changed";
				}
				break;
			} 
		break;
		case "Event":
		case "Task":	// add related info link?
			var body = '';
			var desc = so.getLargeText('Description');
			if (desc) { 
				body = desc.substring(0,maxSizeCommentOrActivity);
				if (body.length >= maxSizeCommentOrActivity ) body += "\n...";
				body = body.replace(/(\s)(\s)(\s)/g,"$3");  // collapse multiple spaces
			}
			l_textField += so.name + ":\nSubject: " + so.get('Subject') + "\n" + 
				"Name: " + fkname(so.get('WhoId') ) + "\n" + body;
		break;
		case "CaseComment": 
			var body = so.get('CommentBody'); // will this ever be null?
			body =  body.substring(0,maxSizeCommentOrActivity) ;  // truncate the way too long comments that may be here...
			if (body.length >= maxSizeCommentOrActivity ) body += "\n...";
			body = body.replace(/(\s)(\s)(\s)/g,"$3"); // collapse multiple spaces
			l_textField += "Comment:\n" + body;	
		break;
		case "Attachment": 
			l_textField += "Attachment Added: " + so.get('Name').substring(0,55) ;
		break;
	} 
	l_textField += "\n\n";
	
	if ( textField.length + l_textField.length > maxSizeTextField ) {
		genErr("Warning: case history is larger than History Text field, data truncated");
	} else {
		textField += l_textField; 
	}
}

function sendEmail() { // since we can't look up templates, we must build one here?
/*
/email/author/emailauthor.jsp?retURL=%2F530000000GrB4lh&p3_lkid=500o0000000mlAd&rtype=003&p2_lkid=003o0000001PXUK&save=1&p24=xxxxx@salesforce.com&p4=&p5=
the first one, retURL=%2F530000000GrB41h is where to go back to.  
It is URL-escaped, (the %2F is the '/') so it will actually go back to /500o0000000fivl, which is a case.  
if you are creating a weblink from say, a case, you would want the caseId mergeField in place of the 500o0000000fivl.

the 2nd parameter: p3_lkid=500o0000000mlAd
that is the WHAT for the email.  Substitute the ID for a case, account, solution ID.

the 3rd parameter: p2_lkid=003o0000001PXUK
that is the WHO for the email.  Substitute the ID for any contact's ID.

Aha, the save=1.  yes you need that.

But you also need the p24=xxxx@salesforce.com.    
This is the "Additional To:" field.  You can 
pass in any email address you want in there.  The emaill will be sent to this address, in ADDITION 
to the WHO.  You can pass in more than one address here by delimiting them with a semi-colon: ';'
p4 and p5 are CC and BCC addresses.    If you are missing p24, p4, and p5, you'll get an error.

*/
	// to avoid hitting a limit on what we can pass to emailauthor, use a template to load the 
	// history text into the body
	var tid = "00Xo0000000UdxE";  // hard code reference to template as we cant' look up templates with AJAX
	var url = "/email/author/emailauthor.jsp?p3_lkid={!Case_ID}&rtype=003&p2_lkid={!Case_Contact_ID}&"+
		"save=1&p24=&p4=&p5=&template_id="+tid+"&new_template=1"; 
	var resp = new Sforce.XMLDOMFile(url);
	// check return found in resp?
	
	hideEmailButton('emailbutton'); // since we just sent it, shows feedback and avoid double send...
}

function drawEmailButton(id) { 
	document.getElementById(id).innerHTML = 
	"<input name=\"email\" value=\" Email History to Contact \" class=\"btn\" onclick=\"javascript:sendEmail()\" type=\"button\">";
} 
function hideEmailButton(id) { 
	document.getElementById(id).innerHTML = "&nbsp;&nbsp;&nbsp;<b>Public History Sent to {!Case_Contact}</b>"; 
} 

function qcallback(qr) { 
	if (qr.className != "QueryResult") {throw("SOQL error " +qr.className +"\tcould not query " + qr.toString() );	}
	list = list.concat(qr.records); // build the global list
} 

function sortDate(a,b) {
	if (newest_ontop) return b.get('CreatedDate') - a.get('CreatedDate');
	return a.get('CreatedDate') - b.get('CreatedDate');
}

function wrapnl( s) { // replace newlines with BR tags
	// if lines are longer than 80 chars or so, and they contain no spaces
	// they will bump off the table, will need to wrap those here
	for ( var i = 0; i < s.length; i++) { 
		var c = s.charAt(i);
		var j = 0; 
		while ( c != ' ' && c != '\n' ) { 
			j++;
			if (j> maxBrokenLine) { // insert a space
				var news = s.substring(0,i+j) + ' ' + s.substr(i+j);
				s = news;
				break;
			}
		}
		i = i + j; 
	}
	
	s = s.replace(/(\s)(\s)(\s)/g,"$3");  // collapse multiple spaces
	s = s.replace(/\n/g,"<br>");
	return s;
} 

function poplink(a,b) { return "<a target=\"_blank\" href=\"/" + a + "\">" + b + "</a>"; } 
function ispublic(so) { 
	switch (so.name) { 
		case "CaseHistory": 	return CaseHistory_ispublic; 			break;
		case "Task":			return (hasVisInSS && so.get('IsVisibleInSelfService'));		break;
		case "Event":			return (hasVisInSS && so.get('IsVisibleInSelfService'));		break;
		case "CaseComment": 	return so.get('IsPublished');		break;
		case "Attachment": 		return true; 			break;
	} 
	throw ( "unknown sobject name "+ so.name); 
	return false; // should never get here
} 

function rowprint(so) {	// each row consists of a header and body
	// header has date, name, public checkbox,  body has the type and text to explain it
	var pub = ispublic(so); 	if (hide_private && !pub) return;
	// timestamp
	var tr = createTag(null,"tr",{"class":"usertimestamp"}); var row1 = tr;	hiOn(tr);	
	createTag(tr,"td",{'nowrap':'nowrap','width':'100'} ).innerHTML = cell_add(Sforce.Util.FormatDate (so.get('CreatedDate'), dformat + " HH:mm")) ;
	// who 
	var cbid = so.get('CreatedById');
	createTag(tr,"td", { 'class':'dataCell'} ).innerHTML = cell_add( fkname( cbid ));
	// public checkbox
	if(pub) createTag(tr,"td",{'width':'5%'}).innerHTML = "<img src=\"/img/checkbox_checked.gif\" alt=\"Not Checked\" title=\"Not Checked\" class=\"checkImg\" height=\"16\" width=\"21\">";
	else createTag(tr,"td",{'width':'5%'}).innerHTML = "<img src=\"/img/checkbox_unchecked.gif\" alt=\"Not Checked\" title=\"Not Checked\" class=\"checkImg\" height=\"16\" width=\"21\">";

	tr =createTag(null,"tr");		var row2 = tr;
	// conditional on two rows...
	switch (so.name) { 
		case "CaseHistory":
			// special case, history contains a duplicate entry holding the id of a user or contact change
			// but we already get the strings , so skip this these.
			var ov = so.get('OldValue'); var nv = so.get('NewValue');
			if ( /005/.test(ov) || /005/.test(nv) ) return;
			if ( /003/.test(ov) || /003/.test(nv) ) return;		
			if ( /02i/.test(ov) || /02i/.test(nv) ) return;		
			
			createTag(tr,"td" , {'width':'100', 'rowspan':'1'}  ).innerHTML = "&nbsp;"; // indent cell 
			td = createTag(tr,"td", {'colspan':'2'} );
			//cells.push( poplink(cbid,fkname(cbid)) );
			var ff = so.get('Field');
			var what = ff.slice(0,1).toUpperCase()+ ff.substr(1); 
			
			switch (what) { 
			case 'Created': td.innerHTML = "Case <strong>Created</ strong>"; 
				break;
			case 'Closed': td.innerHTML = "Case <strong>Closed</ strong>"; 
				break;
			case 'OwnerAssignment' : what = 'Owner Assignment';
			default:
				if (ov && nv) { 
					td.innerHTML = what + " changed from " + ov + " to " + nv;
				} else if (nv) { 
					td.innerHTML = what + " changed to " + nv; 
				} else { 
					td.innerHTML = what + " changed";
				}
				break;
			}
			 
		break;

		case "Event":	
		case "Task":	// add related info link?		
			/* need to exclude emails with this subject 
			 * "Case history for" or body has CASE HISTORY in caps, then we exclude this taks from the history
			 * reasoning is that a history which contains a history and then contains a history will quickly 
			 * become too long and result in low signal to noise in the content
			*/ 
			var sub = so.get('Subject'); 
			var desc = so.getLargeText('Description');
			var body = '';
			if (desc) { 
				body =  wrapnl ( desc.substring(0,maxSizeCommentOrActivity) ); // put some limit on size
				if (body.length >= maxSizeCommentOrActivity) body += "<br>..."; // show we trucated
			}
			var who = fkname(so.get('WhoId') );
			
			var hist_tag = "email: case history"; 
			if (hist_tag == sub.substr(0,hist_tag.length).toLowerCase()) return; // is a history email
			if ( /CASE HISTORY/.test(body.substr(0,455)) ) return; // another indication that this is a history email
			
			createTag(tr,"td" , {'width':'100', 'rowspan':'1'}  ).innerHTML = "&nbsp;"; // indent cell 
			createTag(tr,"td", {'colspan':'2'} ).innerHTML = "<strong>Task:</strong>&nbsp;&nbsp;" + 
				poplink(so.get("Id"),sub) + '<br>'+ poplink( so.get('WhoId'), who ) + "<br>"+ cell_add(body);
			break;
			
		case "CaseComment": 
			createTag(tr,"td" , {'width':'100', 'rowspan':'1'}  ).innerHTML = "&nbsp;"; // indent cell 
			// need to preserve newlines by inserting <br> on full comments
			var body = so.get('CommentBody'); 
			body = wrapnl ( fullcomment ?  body : body.substring(0,maxSizeCommentOrActivity) ); // put some limit on size
			if (body.length >= maxSizeCommentOrActivity) body += "<br>..."; // show we trucated
			createTag(tr,"td", {'colspan':'2'} ).innerHTML = "<strong>Comment</strong>:<br>" + body;			
			break;
			
		case "Attachment": 
			createTag(tr,"td" , {'width':'100', 'rowspan':'1'}  ).innerHTML = "&nbsp;"; // indent cell 
//			createTag(tr,"td", {'colspan':'2'} ).innerHTML = "Attachment Added:<br>" +			
			createTag(tr,"td", {'colspan':'2'} ).innerHTML = "<strong>Attachment</strong> Added: " +			
			 "<a target=\"_blank\" href=\"/" + so.get("Id") + "\">" + so.get('Name').substring(0,55) + "</a>";
			break;
	} 
	table.tbody.appendChild(row1); // if all went well, append these two rows to the table now
	table.tbody.appendChild(row2);
}

Sforce.Dynabean.prototype.getLargeText = function(propName) { 
	// like get(), but will unpack document body elements which are greater than 4096...
	var body=''; 
	try { 
		var tmp = this.getItem(propName).value; // still could return a null, watch for that when calling
		
		if ( Sforce.Util.dltypeof(tmp) == "domelement" ) { 	// see what type of object tmp is...
			for (var i=0; i < tmp.childNodes.length; i++) { 
				body += tmp.childNodes[i].textContent; 
			} 
		} else { // normal string if body is < 4096 bytes	
			body = tmp;	
		} 
	} catch (e) { throw(e);	}
	 
	return body; 
};

var cache = new Array(); // cache this name for later lookups
function fkname ( whoid) { // foreign key name of a contact or user
	if (!whoid) { return '&nbsp;'} //alert('missing param to fkname');
	if ( cache[whoid] ) { return cache[whoid]; } 
	var qr; 
	if ( /^003/.test(whoid) ) { 
		qr= sforceClient.query("select firstname,lastname from Contact where id = '"+whoid+"'");
	} else if ( /^035/.test(whoid) ) { 
     	qr= sforceClient.query("select firstname,lastname from SelfServiceUser where id = '"+whoid+"'");
	} else { 
		qr= sforceClient.query("select firstname,lastname from user where id = '"+whoid+"'");
	} 
	if (qr.className != "QueryResult") { return '&nbsp;'} 
	if (qr.records.length < 1) { return '&nbsp;'} 
	var ret = qr.records[0].get('FirstName') + ' ' + qr.records[0].get('LastName');
	cache[whoid]=ret;
	return ret;
} 

function cell_add ( str) { if (str == undefined || str == null ) { str='&nbsp;';} return str; }

function makeTable(p) {
	var table = createTag(p,"table",{ 'class':'list','width':'100%','border':'0','cellspacing':'0','cellpadding':'0'} );
	table.tbody = createTag(table,'tbody');
	return table
}

function makeRow(atts) { var ret= createTag(null,'TR',atts); ret.active = false; return ret;}

function createTag(parent, name, keyvalPairs) {
	var ret; 
	if (sapp.get_type() == Sforce.Application.Type.InternetExplorer) {
		var trTag = "<"+name+" ";
		for (key in keyvalPairs) { trTag += key + "=\"" + keyvalPairs[key] + "\""; }
		trTag += ">";
		ret = document.createElement(trTag);
	} else { 
		ret = document.createElement(name);
		for (key in keyvalPairs) {	ret.setAttribute(key, keyvalPairs[key]); }
	} 
	if (parent) parent.appendChild(ret);
	return ret;
}

/* ParseDateFormat ( "26/02/2006" ) == "d/M/y"
 * given a date string, report which format it is in, 
 * used to detect locale date formats 
*/
Sforce.Util.ParseDateFormat = function(val,lang) {lang = lang+"";
/*Lang comes from API Name: LocaleSidKey Type: picklist */
	var preferEuro = true;
	if ( /US/.test(lang) ) preferEuro = false; 
	generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
	monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
	dateFirst =new Array('d/MM/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
	var checkList= new Array(generalFormats,preferEuro?dateFirst:monthFirst,preferEuro?monthFirst:dateFirst);
	var d=null;
	for (var i=0; i<checkList.length; i++) {
		var l=checkList[i];
		for (var j=0; j<l.length; j++) {
			d=Sforce.Util.GetDateFromFormat(val,l[j]);
			if (d!=0) { return l[j] }
		}
	}
	return null;
} 

function fieldDefined(table, name) { // checks for custom field exists, return Boolean
	name = name.toLowerCase();
	if( ! /__c/.test(name) ) { name += '__c';}	
	var def = sforceClient.DescribeSObject(table);	// first see if field exists
	var ret =  def.fieldMap.containsItem(name);
	return ( ret );
}
function fieldSize(table, name) { // checks for custom field exists, return Boolean
	name = name.toLowerCase();
	if( ! /__c/.test(name) ) { name += '__c';}	
	var def = sforceClient.DescribeSObject(table);	// first see if field exists
	var ret =  def.fieldMap.getItem(name);
	return ( ret.length );
}
function genErr(s) { document.getElementById('generalError').innerHTML = s }
function clrErr() { document.getElementById('generalError').innerHTML = '' }

//-->
</script>
</head>
<body onload="initPage();" class="case overviewPage" style="cursor:wait" >
<table class="outer" width="100%" border="0" cellspacing="0" cellpadding="0">
<tr><td class="oRight">
<a name="skiplink"><img src="/s.gif" height='1' width='1' alt="Content Starts Here" class="skiplink"></a>
<div class="bPageTitle">
 <div class="ptBody secondaryPalette">
  <div class="content"><img src="/s.gif" alt="Case"  class="pageTitleIcon">
	<h1 class="pageType ">Case Timeline<span class="titleSeparatingColon">:</span></h1>
	<h2 class="pageDescription">{!Case_Number}: {!Case_Subject}</h2>
	<div class="blank">&nbsp;</div>
  </div>
<!--   <div class="links">&nbsp;</div> -->
 </div>
 <!--  
 <div class="ptBreadcrumb">&nbsp;«&nbsp;
	<a href="#" onclick="jumpback();">Back to Case:{!Case_Number}</a>
 </div>
 -->
</div>
<!--  <div class="blank">&nbsp;</div> -->
<div class="bFilter"> 
	<h2>View:</h2>
	<select title="View:" onchange="javascript:changeView(this);" id="fcf" name="fcf">
	<option value="all" selected="selected">All History (Public and Private)</option>
	<option value="public">Public History</option>
	</select>&nbsp;&nbsp;&nbsp;&nbsp;<span class=errorMsg id=generalError ></span>
</div>
<!-- WrappingClass -->
<div class="listCase">
	<div class="bPageBlock secondaryPalette">
		<div class="pbHeader"><TABLE >
			<TR><TD class="pbTitle"><b>Case History Timeline</b></TD>
			
				<TD class="pbButton">
				<span id="emailbutton" ></span>
				<!--
				<input name="done" value=" Done " class="btn" 
				onclick="javascript:jumpback()" type="button">

				 		<input id="showhide" name="showhide" value=" Hide Private " class="btn" 
						onclick="javascript:hide_show()" type="button">
					<input id="fullcomment" name="fullcomment" value=" Full Comments " class="btn" 
						onclick="javascript:fullcomments()" type="button">
				-->	
				</TD>
				<td align="right"     style="font-size:90%;">
				<a href="#" onclick="javascript:jumpback()" >Close Window</a></div>
				</td>
			</TR>
			</TABLE>
		</div>
		
		<div class="pbBody" id="main" name="main"><!-- all happens here -->
		</div> 
		<div class="pbFooter secondaryPalette"> <div class="bg"></div></div> 
	</div>
</div>
</td></tr></table>
</body>
</html>